import org.wisepersist.gradle.plugins.gwt.GwtSuperDev
import org.gradle.internal.os.OperatingSystem

def HttpFileServer server = null
def httpFilePort = 8080

gwt {
    gwtVersion = '2.8.0' // Should match the gwt version used for building the gwt backend
    maxHeapSize = "1G" // Default 256m is not enough for gwt compiler. GWT is HUNGRY
    minHeapSize = "1G"

    src = files(file("src/")) // Needs to be in front of "modules" below.
    modules 'com.github.eoinf.jiggen.GdxDefinition'
    devModules 'com.github.eoinf.jiggen.GdxDefinitionSuperdev'
    project.webAppDirName = 'react/build'

    jsInteropExports {
        shouldGenerate = true
    }

    compiler {
        strict = true;
        disableCastChecking = true;
    }
}

task startHttpServer(dependsOn: ':desktop:buildAssets') {
    dependsOn draftCompileGwt

    String output = project.buildDir.path + "/gwt/draftOut"
    doLast {
        copy {
            from project.webAppDirName
            into output
        }

        copy {
            from "war"
            into output
        }

        server = new SimpleHttpFileServerFactory().start(new File(output), httpFilePort)

        println "Server started in directory " + server.getContentRoot() + ", http://localhost:" + server.getPort()
    }
}

task compileReactDev(type: Exec) {
    environment 'REACT_APP_API_URL', 'https://api.jiggen.app'
    environment 'REACT_APP_SHOW_SUPERDEV', 'false'
    workingDir = 'react'
    commandLine 'cmd', '/c', 'npm run build'
}

task compileReactDevLocal(type: Exec) {
    environment 'REACT_APP_API_URL', 'http://localhost:4567'
    environment 'REACT_APP_SHOW_SUPERDEV', 'false'
    workingDir = 'react'
    commandLine 'cmd', '/c', 'npm run build'
}

task compileReactProd(type: Exec) {
    environment 'REACT_APP_API_URL', 'https://api.jiggen.app'
    workingDir = 'react'

    if (OperatingSystem.current().isWindows()) {
        commandLine 'cmd', '/c', 'npm run build'
    } else {
        executable = 'npm'
        args = ['run', 'build']
    }
}

task superDevLocal(type: GwtSuperDev, dependsOn: [compileReactDevLocal]) {
    dependsOn startHttpServer
    doFirst {
        gwt.modules = gwt.devModules
        gwt.jsInteropExports {
            shouldGenerate = true
        }
    }
}

task superDev(type: GwtSuperDev, dependsOn: [compileReactDev]) {
    dependsOn startHttpServer
    doFirst {
        gwt.modules = gwt.devModules
        gwt.jsInteropExports {
            shouldGenerate = true
        }
    }
}

task dist(dependsOn: [clean, compileGwt, compileReactProd]) {
    doLast {
        file("build/dist").mkdirs()
        copy {
            from "build/gwt/out"
            into "build/dist"
        }
        copy {
            from "webapp"
            into "build/dist"
        }
        copy {
            from "war"
            into "build/dist"
        }
        copy {
            from "react/build"
            into "build/dist"
        }
    }
}

task addSource {
    doLast {
        sourceSets.main.compileClasspath += files(project(':core').sourceSets.main.allJava.srcDirs)
    }
}

tasks.compileGwt.dependsOn(':desktop:buildAssets', addSource)
tasks.draftCompileGwt.dependsOn(addSource)

sourceCompatibility = 1.8
sourceSets.main.java.srcDirs = ["src/"]


eclipse.project {
    name = appName + "-html"
}
